find_index:
//X0 = a[]
//X1 = n
//X2 = start
//X3 = value
//X4 = index
//X5 = i
//X6 = i * 8
//X7 = value of a[i]

ADDI X3, XZR, #5 = // value = 5

ADDI X2, XZR, #0 // Set start to 0
ADDI X4, X2, #0 // index = start
ADDI X5, X2, #1 // i = start + 1

top_of_find_index_loop:
SUBS XZR, X5, X1   //Set flag for i > n to end for loop
B.GT end_find_index

ADD X6, X0, X6  // a[i]
LDUR X7, [X6, #0] //value of a[i]
LSL X6, X5, #3    //shift i
ADDI X5, X5, #1   // i++
SUBS XZR, X7, X3    // Flag for a[i] < value
B.LT find_index_increment
SUBS XZR, X5, X1    // Flag for i < n
B.LT  top_of_find_index_loop

find_index_increment:
ADDI X4, X4, #1
B top_of_find_index_loop

end_find_index:
PRNT X4

