B main

swap:
//X0 = a
//X1 = b
//X12 = tmp

ADD X12, XZR, X1
SUB X1, X1, X1

ADD X1, XZR, X0
SUB X0, X0, X0

ADD X0, XZR, X12

BR LR


find_index:
//X0 = a[]
//X1 = n
//X2 = start
//X3 = value
//X9 = index
//X10 = i
//X11 = i * 8
//X12 = value of a[i]

ADDI X3, XZR, #5 // value = 5

ADDI X2, XZR, #0 // Set start to 0
ADDI X9, X2, #0 // index = start
ADDI X10, X2, #1 // i = start + 1

top_of_find_index_loop:
SUBS XZR, X10, X1   //Set flag for i > n to end for loop
B.GT end_find_index

ADD X11, X0, X11  // a[i]
LDUR X12, [X11, #0] //value of a[i]
LSL X11, X10, #3    //shift i
ADDI X10, X10, #1   // i++
SUBS XZR, X12, X3    // Flag for a[i] < value
B.LT find_index_increment
SUBS XZR, X10, X1    // Flag for i < n
B.LT  top_of_find_index_loop

find_index_increment:
ADDI X9, X9, #1
B top_of_find_index_loop

end_find_index:
ADDI X0, X9, #0



skip_duplicates:
//X0 = a[]
//X1 = start
//X2 = value
//X10 = index
ADDI X1, XZR, #1 //for test
ADDI X2, XZR, #5 //for test

ADD X10, XZR, X1 // index = start
ADD X13, XZR, X2 // X13 = value

top_of_skip_dup:
LSL X11, X10, #3 //convert index to offset
ADD X11, X0, X11 //$a[index]
LDUR X12, [X11, #0] //X12 = a[index]

//for test
//PRNT X13
//PRNT X12

SUBS X14, X13, X12  //value - a[index]
CBNZ X14, found_index //if not equal, then branch to found index

ADDI X10, X10, #1 //index++
B top_of_skip_dup

found_index:
ADD X0, X10, XZR
BR LR


complete_cycle:
//X0 = a[]
//X1 = n
//X2 = start
//X3 = index
//X4 = value
//X9 = index - start
//X10 = a[]
//X11 = a[index]

SUBI SP, SP, #48 //Make space on stack

STUR X0, [SP, #0]
STUR X1, [SP, #8]
STUR X2, [SP, #16]
STUR X3, [SP, #24]
STUR X4, [SP, #32]
STUR LR, [SP, #40]

top_complete_cycle_loop:
SUB X9, X3, X2
CBZ X9, end_complete_cycle

LDUR X3, [SP, #32] // Set X3 = value for find_index

BL find_index

ADD X3, X0, XZR // Set index = X3 to get return value from find_index 

LDUR X0, [SP, #0] // Restore X0
LDUR X1, [SP, #8] // Restore X1
LDUR X2, [SP, #24] // Restore X2
LDUR X4, [SP, #32] // Restore X4

ADDI X1, X3, #0  //Set X1 to index
ADDI X2, X4, #0  //Set X2 to value

BL skip_duplicates

ADD X3, X0, XZR // Set index = X3 to get return value from find_index 

LDUR X0, [SP, #0] // Restore X0
LDUR X1, [SP, #8] // Restore X1
LDUR X2, [SP, #24] // Restore X2
LDUR X4, [SP, #32] // Restore X4

ADDI X10, X0, #0  // a[]
LDUR X11, [X10, #0] //value of a[index]
LSL X11, X3, #3 //shift index

ADDI X1, X11, #0 //move a[index] to be parameter X1

ADDI X0, X4, #0 //move value to be parameter X0
BL swap

//TODO reassign the values after the swap

B top_complete_cycle_loop

end_complete_cycle:
LDUR LR, [SP, #40] // Restore LR
BR LR


cycle_sort:
//X0 = a[]
//X1 = n
//X2 = cstart
//X3 = val 
//X4 = index
//X5 = n-1
//X6 = holder for array
//X7 = temp
//X8 = temp

ADDI X2, XZR, #0
//n will have preloaded value
SUBI X5, X2, #1

cycle_sort_top:
ADDI X2, X2, #1
SUBS XZR, X2, X5
B.GE finished_cycle

LSL X6, X2, #3 //convert index to offset
ADD X6, X0, X6 //$a[cstart]
LDUR X3, [X6, #0] //value of a[cstart]

//need to get index(X4) from find_index
//send the array:X0, n:X1, cstart:X2, val:X3
BL find_index

SUB X10, X4, X2
CBZ X10, cycle_sort_top

//need to get index(X4) from skip_duplicates
//send a:X0, index: X4, val: X3
BL skip_duplicates

//swap val and a[index]
LSL X8, X4, #3
ADD X8, X0, X8

ADD X7, XZR, X3 //Add val to temp reg X7
SUB X3, X3, X3 //remove value from val
LDUR X3, [X8, #0] //load value of a[index] into val(X3)
//STUR X7, [X0, X8] //store X7 in array at offset of index -- fix
SUB X7, X7, X7 //Remove values from temp reg X7
SUB X8, X8, X8 //Remove values from temp reg X8

//complete_cycle
//send a: X0, n: X1, cstart: X2, index: X4, val: X3
BL complete_cycle

B cycle_sort_top

finished_cycle:
BR LR



fill:
//X0 = a[]
//X1 = n
//X9 = i
//X10 = i * 8
//X11 = n - i - 1

CBZ X1, end_fill //If n=0 just do nothing

top_of_fill_loop:
LSL X10, X9, #3  //Shift i
ADD X10, X0, X10  // a[i]
SUB X11, X1, X9  //n - i
SUBI X11, X11, #1  // n - i - 1
STUR X11, [X10, #0]  // store X11 in a[i]
ADDI X9, X9, #1    // i++
SUBS XZR, X9, X1   // set flag for i < n
B.GE end_fill
B top_of_fill_loop

end_fill:
BR LR



binary_search:
//X0 = a*
//X1 = start
//X2 = end
//X3 = value
//X9 = index
//X10 = start + end
//X11 = a[index]
//X12 = a[index] - value | Should be 0 if equvivilent 

SUBS XZR, X2, X1   //if end < start
B.LT return_failure 

ADD X10, X1, X2    //start + end

LSR X9, X10, #1    //Divide by 2 by shifting right once

ADD X11, X0, X9  // a[index]

SUB X12, X11, X3     // a[index] - value
CBZ X12, return_binary_search   // a[index] - value = 0 meaning they are equivilent and index is found

SUBS XZR, X11, X3   // a[index] > value
B.GT minus_one

B plus_one

minus_one:
SUBI X2, X9, #1    //end = index - 1
B binary_search

plus_one:
ADDI X1, X9, #1    //start = index + 1
B binary_search

return_failure:
ADDI X0, XZR, #-1
BR LR 

return_binary_search:
ADDI X0, X9, #0
BR LR


main:
ADDI X1, XZR, #10000 //n = 10000

SUBI SP, SP, #8 
STUR X1, [SP, #0] //Save n to stack

BL fill

LDUR X1, [SP, #0]

SUBI SP, SP, #16 
STUR X0, [SP, #0] //Save a[] to stack
STUR X1, [SP, #8] //Save n to stack

ADDI X2, X1, #-1 //X2 = N - 1 
ADDI X1, XZR, #0 // X1 = 0
ADDI X3, XZR, #0 // X3 = 0

BL binary_search

PRNT X0

LDUR X0, [SP, #0]
LDUR X1, [SP, #8]

ADDI X2, X1, #-1 //X2 = N - 1 
ADDI X3, X1, #-1 // X3 = N - 1 
ADDI X1, XZR, #0 // X1 = 0

BL binary_search

PRNT X0

LDUR X0, [SP, #0]
LDUR X1, [SP, #8]

ADDI X2, X1, #-1 //X2 = N - 1 
LSR X3, X1, #1 // X3 = N - 1 
ADDI X1, XZR, #0 // X1 = 0

BL binary_search

PRNT X0

LDUR X0, [SP, #0]
LDUR X1, [SP, #8]

ADDI X2, X1, #-1 //X2 = N - 1 
ADDI X3, X1, #0 // X3 = N
ADDI X1, XZR, #0 // X1 = 0

BL binary_search

PRNT X0
